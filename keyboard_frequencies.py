#!/usr/bin/env python

"""
Calculate the frequencies of keys on a piano.

Usage:

	python keyboard_frequencies.py prefix start_octave end_octave

Where:

* start_octave is the octave number relative to the octave containing middle C
* end_octave is the number of the last octave to output

Output example:

	/******************************************************************************
	 * Autogenerated by keyboard_frequencies.py prefix -1 3
	 ******************************************************************************/
	
	#define prefix_NUM_KEYS 36
	#define prefix_MIDDLE_C_KEY 12
	const int prefix_KEYBOARD_FREQUENCIES[] = {
		...
		440, // A  (Key 49, Octave 0)
		466, // A# (Key 50, Octave 0)
		493, // B  (Key 51, Octave 0)
		...
	};
"""

CONCERT_A_KEY  = 49
CONCERT_A_FREQ = 440.0

MIDDLE_C_KEY = CONCERT_A_KEY - 9

PIANO_KEY_NAMES = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]


def key_frequency(key):
	"""
	Return the frequency of the given piano key.
	
	See http://en.wikipedia.org/wiki/Piano_key_frequencies
	"""
	return (2.0**(1.0/12.0))**(key-CONCERT_A_KEY) * CONCERT_A_FREQ



def main(prefix, start_octave, end_octave):
	# The python convention
	end_octave += 1
	
	out = ""
	out += "#define %s_NUM_KEYS %s\n"%(prefix, 12*(end_octave-start_octave))
	out += "#define %s_MIDDLE_C_KEY %s\n"%(prefix, 12*(-start_octave))
	out += "const int %s_KEYBOARD_FREQUENCIES[] = {\n"%prefix
	
	for key in range(start_octave*12, end_octave*12):
		key += MIDDLE_C_KEY
		out += "\t%4d, // %2s (Key %2d, Octave %2d)\n"%(
			key_frequency(key),
			PIANO_KEY_NAMES[(key-MIDDLE_C_KEY)%12],
			key,
			(key-MIDDLE_C_KEY)/12
		)
	
	out += "};\n"
	
	return out


if __name__=="__main__":
	import sys
	
	prefix       = sys.argv[1]
	start_octave = int(sys.argv[2])
	end_octave   = int(sys.argv[3])
	
	out  = "/" + 78*"*" + "\n"
	out += " * Autogenerated by %s\n"%(" ".join(sys.argv))
	out += " " + 78*"*" + "/\n"
	out += main(prefix, start_octave, end_octave)
	print out

