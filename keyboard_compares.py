#!/usr/bin/env python

r"""
Generates values for finding out which keys are pressed given a system of
resistors such as:

	,------,------,------,------- Vcc
	|      |      |      |
	 \ s3   \ s2   \ s1   \ s0
	|      |      |      |
	Z r3   Z r2   Z r1   Z r0
	|      |      |      |
	+------+--,---+------+------- Analog Pin
	          |
	          Z r
	          |
	          `------------------ Gnd

Usage:

	python keyboard_compares.py prefix adc_max r r3 r2 r1 r0...

Where:

* prefix is a string which will be prepended to all definitions
* adc_max is the largest integer the ADC can output
* r is the resistor connecting to ground (Ohms)
* r0... are the resistor values connecting to the switches (Ohms)

Output looks like the following:

	/******************************************************************************
	 * Autogenerated by keyboard_compares.py prefix 9999 1.0 1.0 2.0 4.0 8.0
	 ******************************************************************************/
	#define prefix_NUM_SWITCHES 4
	const int prefix_ADC_VALUES[] = {
		   0, // Switches: [    ]
		1234, // Switches: [   o]
		4321, // Switches: [  o ]
		5678, // Switches: [  oo]
		...
	};


"""


def par_resistance(rs):
	"""
	Gets the overall resistance of a circuit where the given resistor values are
	in parallel. If the resistance is infinate, returns inf.
	"""
	divisor = sum((1.0/r) for r in rs) 
	if divisor == 0.0:
		return float('inf')
	else:
		return 1.0/divisor


def pot_div_output(r1, r2, vin = 1.0):
	"""
	Get the voltage of the sense wire of a potential divider where r1 is the
	resistance between vin and the sense wire and r2 is the resistance between the
	sense wire and ground.
	"""
	return (r2/(r1+r2)) * vin


def get_adc_inputs(r, rs, vin = 1.0):
	"""
	Returns a list of floats which represent the sense voltage to an ADC when the
	resistors are connected. e.g. the value at index 1 in the list is when rs[0]
	is connected and no others.
	"""
	
	return [ pot_div_output(par_resistance([rn for n,rn in enumerate(rs) if bits&(1<<n)])
	                       , r
	                       , vin
	                       )
	         for bits in range(1<<len(rs))
	       ]


def main(prefix, adc_max, r, rs):
	out = ""
	out += "#define %s_NUM_SWITCHES %s\n"%(prefix, len(rs))
	out += "const int %s_ADC_VALUES[] = {\n"%prefix
	
	for bits, adc_input in enumerate(get_adc_inputs(r, rs)):
		out += "\t%4d, // Switches: [%s]\n"%(
			int(adc_input*adc_max),
			"".join("o" if bits&(1<<n) else " " for n in range(len(rs)))[::-1],
		)
	
	out += "};\n"
	
	return out


if __name__=="__main__":
	import sys
	
	prefix  = sys.argv[1]
	adc_max = int(sys.argv[2])
	r       = float(sys.argv[3])
	rs      = map(float, sys.argv[4:])[::-1]
	
	out  = "/" + 78*"*" + "\n"
	out += " * Autogenerated by %s\n"%(" ".join(sys.argv))
	out += " " + 78*"*" + "/\n"
	out += main(prefix, adc_max, r, rs)
	print out

